[
["visualization.html", "Section 4 Visualization", " Section 4 Visualization In this section, we discuss a set of tools for data visualization in R. Goals of data visualization Communicate information Transparently (show me the data!) Quickly Simply Accurately And with a little work: beautifully There are many resources for ideas and best practices for data visualization. See here and here. We will cover many types of visuals, each typically designed for a different purpose. What to communicate? Data summary Central tendency (e.g., mean, median) Spread (e.g., standard deviation, IQR) Comparison e.g., Callback rates for black vs. white sounding names Trend e.g., Economic confidence over time Relationship e.g., Correlation "],
["application-social-status-and-economic-views.html", "4.1 Application: Social Status and Economic Views", " 4.1 Application: Social Status and Economic Views We are going to explore different types of visualizations through different social science examples. The first application we visit is a survey experiment. Thal, A. (2020). The desire for social status and economic conservatism among affluent Americans. American Political Science Review, 114(2), 426-442. In the experiment, affluent Americans are randomly assigned to encounter Facebook posts in which others broadcast their economic success. These posts are designed in a way that encourages affluent respondents to view economic success as a means of achieving social status. Causal claims “I expect that exposure to these posts will cause affluent Americans to become more supportive of conservative economic policies.” “I also expect that exposure to these posts will cause especially large increases in economic conservatism among affluent men.” The experiment includes a sample of 2010 affluent Americans– people who report household incomes in the top 10 percent of the U.S. income distribution. Experiment Ingredients: Causal Question: Does desire for social status influence economic views of affluent Americans? Recruitment: Ask affluent Americans to take a survey online Randomization: Randomly assign respondents to view different fictional Facebook posts designed to signal different motivations Outcome: an index based on respondents’ support for decreasing “taxes on households making $150,000 or more a year,” support for decreasing the “taxes on money people make from selling investments, also referred to as capital gains,” and support for decreasing “government regulation of business and industry.” Comparison: Average economic views between experimental conditions. Snapshot of status conditions Snapshot of Concrete and Placebo comparison conditions Can you put this into the potential outcomes framework? "],
["boxplots.html", "4.2 Boxplots", " 4.2 Boxplots Let’s load the data! Here, note that the data file is in a .RData format instead of .csv. This means that instead of using read.csv, we should use a function to load the data that is suitable for the .RData format. This will be load. That function works the following way: load(&quot;status.RData&quot;) After running the above code, an object will show up in your R environment. head(status) ## condition male econcon ## 2 Concrete 1 0.7500000 ## 3 Self-Esteem 1 1.0000000 ## 4 Placebo 1 0.6666667 ## 5 Self-Esteem 0 0.2500000 ## 6 Self-Esteem 0 1.0000000 ## 7 Social Approval 0 0.8333333 The data include the following variables condition: Placebo, Concrete, Self-Esteem, Social Approval, Conspicuous Consumption gender: 1= male; 0= otherwise econcon: Economic views. Numeric variable from 0 to 1, with higher values reflecting more conservative views 4.2.1 Data Summary: Boxplot Characterize the distributions of continuous numeric variables at once Features: box, whiskers, outliers We will supply the function with a column in our data, and the boxplot displays the distribution of that variable. Figure from Will Lowe Here is an example of the boxplot using our econcon variable. We have added a title and y-axis label to the plot through the main and ylab arguments. Play around with changing the words in those arguments. boxplot(status$econcon, main=&quot;Economic Views in the Survey Sample&quot;, ylab=&quot;Economic Views&quot;) After you execute the plot code, a preview of the plot should appear in the bottom-right window of RStudio. Boxplots are also useful for data summary across multiple distribution: boxplot(y ~ x, data = d) boxplot(econcon ~ condition, data=status, main=&quot;Economic Views by Experimental Condition&quot;, ylab=&quot;Economic Views&quot;, names = c(&quot;Placebo&quot;, &quot;Concrete&quot;, &quot;Conspicuous&quot;, &quot;Self-Esteem&quot;, &quot;Social&quot;), xlab = &quot;Experimental Condition&quot;, col = c(&quot;red3&quot;, rep(&quot;dodgerblue&quot;, 4))) The additional arguments are just aesthetics. Play around with different settings. For example, can you change the code to make the first two boxes red? Colors are supplied as a vector using the col = argument. To explore colors in R, run this function colors() in your R console. How should we interpret these results? Does status or social approval motivation, specifically, influence economic views? What about other potential motivations? "],
["barplots.html", "4.3 Barplots", " 4.3 Barplots Comparing frequencies (raw N), proportions, and/or means across categories We will use the barplot() function. In contrast to the boxplot, the barplot function takes a vector of values that will serve as the top of the bars in the plot– it does not summarize a variable from within the function E.g., we could supply it a set of means to plot, not a raw variable Many of the other arguments are aesthetics that will give you deja vu after working with boxplot. This means that barplots are pretty easy to create in R. We can supply it a short vector of any values (e.g., valuesbar &lt;- c(20, 40, 50, 10, 60)), and we could also supply it a vector of any names to label those values. For real applications, this means we could supply a barplot with the output of a tapply() function, a table() summarizing a single variable, or a set of mean() values we have combined into a vector. For example, in experiments, we may use barplots to compare the mean from the treatment group(s) \\(\\bar{Y}(1)\\) to the control \\(\\bar{Y}(0)\\) on some outcome. Let’s do it! First, we need the means. Let’s find the conditional means of economic views. condmeans &lt;- tapply(status$econcon, status$condition, mean) condmeans # save as object to supply to the barplot function ## Placebo Concrete Conspicuous Consumption ## 0.6340948 0.6647485 0.6724065 ## Self-Esteem Social Approval ## 0.6564103 0.6904444 The first input is the vector of means/proportions/frequency you want to plot. barplot(condmeans, ylim = c(0,1), # y-axis dimensions names = c(&quot;Placebo&quot;, &quot;Concrete&quot;, &quot;Conspicuous&quot;, &quot;Self-Esteem&quot;, &quot;Social&quot;), col = &quot;black&quot;, # color of bars main = &quot;Mean Economic Views by Condition&quot;, # plot title cex.main = .8, # size of plot title cex.names = .8, # size of name labels ylab = &quot;Mean Views&quot;, # yaxis label cex.lab = .8,# size of yaxis label las = 1) # controls angle of axis labels The remaining arguments alter the look of the plot to make it more informative. How could we improve this plot to make the interpretation easier? 4.3.1 Saving Plots You can save an image of your plot as a png() to your working directory. Place png() just before your plot with a name in quotations, and then specify the dimensions. Place dev.off() at the bottom. png(&quot;mybarplot.png&quot;, width = 7, height = 4, res=300, units=&quot;in&quot;) barplot(condmeans, ylim = c(0,1), # y-axis dimensions names = c(&quot;Placebo&quot;, &quot;Concrete&quot;, &quot;Conspicuous&quot;, &quot;Self-Esteem&quot;, &quot;Social&quot;), col = &quot;black&quot;, # color of bars main = &quot;Mean Economic Views by Condition&quot;, # plot title cex.main = .8, # size of plot title cex.names = .8, # size of name labels ylab = &quot;Mean Views&quot;, # yaxis label cex.lab = .8,# size of yaxis label las = 1) # controls angle of axis labels dev.off() 4.3.2 Creating New Variables The author theorizes that social approval, self-esteem, and conspicuous consumption are all elements of “status motivation.” We could analyze the results by collapsing them into a single category called “status motivation” and compare it to the other experimental groups. Create a new variable conditionnew Code the variable into new categories based on the values in the original condition variable Check the class of the new variable and convert if necessary Verify new variable by exploring values status$conditionnew &lt;- NA # create new variable ## Code new variable status$conditionnew[status$condition == &quot;Placebo&quot;] &lt;- &quot;Placebo&quot; status$conditionnew[status$condition == &quot;Concrete&quot;] &lt;- &quot;Concrete&quot; status$conditionnew[status$condition == &quot;Conspicuous Consumption&quot; | status$condition == &quot;Self-Esteem&quot; | status$condition == &quot;Social Approval&quot;] &lt;- &quot;Status&quot; # class(status$conditionnew) check the class status$conditionnew &lt;- as.factor(status$conditionnew) # convert An alternative way to create the new variable is through an ifelse statement. Can be read: If this relational statement is TRUE, I assign you A, otherwise I assign you B This often works best when we change factor variables to character status$conditionnew2 &lt;- as.character(status$condition) status$conditionnew2 &lt;- ifelse(status$condition == &quot;Conspicuous Consumption&quot; | status$condition == &quot;Self-Esteem&quot; | status$condition == &quot;Social Approval&quot;, &quot;Status&quot;, status$conditionnew2) status$conditionnew2 &lt;- as.factor(status$conditionnew2) table(status$conditionnew2) ## ## Concrete Placebo Status ## 391 394 1157 Note: Barplots don’t have to display means. We could also display frequencies. For example, let’s make a plot of the number of people in each condition using our new variable. freqobs &lt;- table(status$conditionnew) barplot(freqobs, ylim = c(0, 1200), col = &quot;black&quot;, # color of bars main = &quot;Number of People per Condition&quot;, # plot title cex.main = .8, # size of plot title cex.names = .8, # size of name labels ylab = &quot;N of Observations&quot;, # yaxis label cex.lab = .8,# size of yaxis label las = 1) # controls angle of axis labels "]
]
